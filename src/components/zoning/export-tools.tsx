import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { toast } from "sonner";
import { 
  Download, 
  FileJson, 
  Globe, 
  FileText, 
  BarChart3, 
  Palette, 
  MapPin,
  Calendar,
  Info
} from "lucide-react";
import type { VectorFeature, ZoningType, DetectedLegend } from "./zoning-types";

interface ExportToolsProps {
  onExportGeoJSON: () => void;
  onExportKML: () => void;
  featureCount: number;
  disabled?: boolean;
  features?: VectorFeature[];
  zoningTypes?: ZoningType[];
  detectedLegend?: DetectedLegend | null;
  pdfFileName?: string;
}

export const ExportTools = ({ 
  onExportGeoJSON, 
  onExportKML, 
  featureCount, 
  disabled,
  features = [],
  zoningTypes = [],
  detectedLegend,
  pdfFileName
}: ExportToolsProps) => {
  const [showAdvanced, setShowAdvanced] = useState(false);
  const handleExportGeoJSON = () => {
    if (featureCount === 0) {
      toast.error("No zones to export");
      return;
    }
    onExportGeoJSON();
    toast.success("GeoJSON file downloaded successfully!");
  };

  const handleExportKML = () => {
    if (featureCount === 0) {
      toast.error("No zones to export");
      return;
    }
    onExportKML();
    toast.success("KML file downloaded successfully!");
  };

  const exportSummaryReport = () => {
    if (featureCount === 0) {
      toast.error("No zones to export");
      return;
    }

    const zoneStats = features.reduce((stats, feature) => {
      const code = feature.zoneType.code;
      if (!stats[code]) {
        stats[code] = {
          name: feature.zoneType.name,
          count: 0,
          totalArea: 0,
          color: feature.zoneType.color
        };
      }
      stats[code].count++;
      stats[code].totalArea += feature.properties.area;
      return stats;
    }, {} as Record<string, any>);

    const report = {
      title: "Zoning Map Digitization Summary",
      generated: new Date().toISOString(),
      source: pdfFileName || "Unknown PDF",
      totalFeatures: featureCount,
      totalArea: features.reduce((sum, f) => sum + f.properties.area, 0),
      aiAnalysis: detectedLegend ? {
        confidence: detectedLegend.confidence,
        legendLocation: detectedLegend.legendLocation,
        mapScale: detectedLegend.mapScale,
        detectedZones: detectedLegend.zones.length
      } : null,
      zoneBreakdown: Object.entries(zoneStats).map(([code, stats]) => ({
        code,
        name: (stats as any).name,
        count: (stats as any).count,
        totalArea: (stats as any).totalArea,
        color: (stats as any).color,
        percentageOfTotal: ((stats as any).totalArea / features.reduce((sum, f) => sum + f.properties.area, 0) * 100).toFixed(1)
      }))
    };

    const reportText = `ZONING MAP DIGITIZATION SUMMARY
===============================

Project: ${report.title}
Generated: ${new Date(report.generated).toLocaleString()}
Source File: ${report.source}

OVERVIEW
--------
Total Zones: ${report.totalFeatures}
Total Area: ${(report.totalArea / 10000).toFixed(2)} hectares

${report.aiAnalysis ? `AI ANALYSIS
-----------
Detection Confidence: ${Math.round(report.aiAnalysis.confidence * 100)}%
Legend Location: ${report.aiAnalysis.legendLocation}
Map Scale: ${report.aiAnalysis.mapScale || 'Not detected'}
AI Detected Zones: ${report.aiAnalysis.detectedZones}

` : ''}ZONE BREAKDOWN
--------------
${report.zoneBreakdown.map(zone => 
  `${zone.code} - ${zone.name}:
  Count: ${zone.count} zones
  Area: ${(zone.totalArea / 10000).toFixed(2)} ha (${zone.percentageOfTotal}%)
  Color: ${zone.color}`
).join('\n\n')}

Generated by Zoning Map Digitizer
${new Date().toLocaleDateString()}`;

    const blob = new Blob([reportText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'zoning-summary-report.txt';
    link.click();
    URL.revokeObjectURL(url);
    
    toast.success("Summary report downloaded!");
  };

  const exportStyledKML = () => {
    if (featureCount === 0) {
      toast.error("No zones to export");
      return;
    }

    // Generate KML with styling
    const kmlHeader = `<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
  <Document>
    <name>Zoning Map - ${pdfFileName || 'Export'}</name>
    <description>Generated by Zoning Map Digitizer</description>`;

    const kmlStyles = zoningTypes.map(zt => `
    <Style id="${zt.code}">
      <PolyStyle>
        <color>7f${zt.color.slice(1).split('').reverse().join('')}</color>
        <fill>1</fill>
        <outline>1</outline>
      </PolyStyle>
      <LineStyle>
        <color>ff${zt.color.slice(1).split('').reverse().join('')}</color>
        <width>2</width>
      </LineStyle>
    </Style>`).join('');

    const kmlPlacemarks = features.map(feature => {
      const coords = feature.coordinates[0].map(coord => 
        `${coord[0]},${coord[1]},0`
      ).join(' ');
      
      return `
    <Placemark>
      <name>${feature.zoneType.name}</name>
      <description>
        Zone Type: ${feature.zoneType.name} (${feature.zoneType.code})
        Area: ${(feature.properties.area / 10000).toFixed(2)} hectares
        Created: ${new Date(feature.properties.created).toLocaleString()}
        ${feature.zoneType.description ? `Description: ${feature.zoneType.description}` : ''}
      </description>
      <styleUrl>#${feature.zoneType.code}</styleUrl>
      <Polygon>
        <outerBoundaryIs>
          <LinearRing>
            <coordinates>${coords}</coordinates>
          </LinearRing>
        </outerBoundaryIs>
      </Polygon>
    </Placemark>`;
    }).join('');

    const kmlFooter = `
  </Document>
</kml>`;

    const kmlContent = kmlHeader + kmlStyles + kmlPlacemarks + kmlFooter;
    
    const blob = new Blob([kmlContent], { type: 'application/vnd.google-earth.kml+xml' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'zoning-map-styled.kml';
    link.click();
    URL.revokeObjectURL(url);
    
    toast.success("Styled KML exported!");
  };

  const getZoneStats = () => {
    const stats = features.reduce((acc, feature) => {
      const code = feature.zoneType.code;
      if (!acc[code]) {
        acc[code] = { count: 0, area: 0, name: feature.zoneType.name, color: feature.zoneType.color };
      }
      acc[code].count++;
      acc[code].area += feature.properties.area;
      return acc;
    }, {} as Record<string, any>);
    return Object.entries(stats);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="w-5 h-5" />
          Export Data
        </CardTitle>
        <CardDescription>
          Advanced export options with rich metadata and styling
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Export Summary */}
        <div className="p-3 bg-secondary rounded-lg">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium">Export Summary</span>
            <Badge variant={featureCount > 0 ? "default" : "secondary"}>
              {featureCount} zones
            </Badge>
          </div>
          {featureCount > 0 && (
            <div className="grid grid-cols-2 gap-2 text-xs">
              <div>
                <span className="text-muted-foreground">Total Area:</span>
                <div className="font-medium">
                  {(features.reduce((sum, f) => sum + f.properties.area, 0) / 10000).toFixed(2)} ha
                </div>
              </div>
              <div>
                <span className="text-muted-foreground">Zone Types:</span>
                <div className="font-medium">
                  {new Set(features.map(f => f.zoneType.code)).size}
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Zone Statistics */}
        {featureCount > 0 && (
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <BarChart3 className="w-4 h-4" />
              <span className="text-sm font-medium">Zone Breakdown</span>
            </div>
            <div className="max-h-32 overflow-y-auto space-y-1">
              {getZoneStats().map(([code, stats]: [string, any]) => (
                <div key={code} className="flex items-center justify-between p-2 bg-muted rounded text-xs">
                  <div className="flex items-center gap-2">
                    <div
                      className="w-3 h-3 rounded-sm"
                      style={{ backgroundColor: stats.color }}
                    />
                    <span className="font-medium">{code}</span>
                  </div>
                  <div className="text-right">
                    <div>{stats.count} zones</div>
                    <div className="text-muted-foreground">
                      {(stats.area / 10000).toFixed(1)} ha
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        <Separator />

        {/* Basic Export Options */}
        <div className="space-y-2">
          <span className="text-sm font-medium">Standard Formats</span>
          <div className="grid gap-2">
            <Button
              onClick={handleExportGeoJSON}
              disabled={disabled || featureCount === 0}
              className="w-full justify-start"
              variant="outline"
            >
              <FileJson className="w-4 h-4 mr-2" />
              Export GeoJSON
              <span className="ml-auto text-xs text-muted-foreground">
                .geojson
              </span>
            </Button>

            <Button
              onClick={handleExportKML}
              disabled={disabled || featureCount === 0}
              className="w-full justify-start"
              variant="outline"
            >
              <Globe className="w-4 h-4 mr-2" />
              Export KML
              <span className="ml-auto text-xs text-muted-foreground">
                .kml
              </span>
            </Button>
          </div>
        </div>

        {/* Advanced Export Options */}
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Advanced Options</span>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowAdvanced(!showAdvanced)}
            >
              <Info className="w-4 h-4" />
            </Button>
          </div>
          
          {showAdvanced && (
            <div className="grid gap-2">
              <Button
                onClick={exportStyledKML}
                disabled={disabled || featureCount === 0}
                className="w-full justify-start"
                variant="outline"
              >
                <Palette className="w-4 h-4 mr-2" />
                Styled KML
                <span className="ml-auto text-xs text-muted-foreground">
                  .kml
                </span>
              </Button>

              <Button
                onClick={exportSummaryReport}
                disabled={disabled || featureCount === 0}
                className="w-full justify-start"
                variant="outline"
              >
                <FileText className="w-4 h-4 mr-2" />
                Summary Report
                <span className="ml-auto text-xs text-muted-foreground">
                  .txt
                </span>
              </Button>
            </div>
          )}
        </div>

        {/* AI Analysis Summary */}
        {detectedLegend && detectedLegend.confidence > 0 && (
          <div className="p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
            <div className="flex items-center gap-2 mb-2">
              <MapPin className="w-4 h-4 text-blue-600" />
              <span className="text-sm font-medium text-blue-900 dark:text-blue-100">
                AI Analysis Available
              </span>
            </div>
            <div className="text-xs text-blue-800 dark:text-blue-200 space-y-1">
              <p>Confidence: {Math.round(detectedLegend.confidence * 100)}%</p>
              <p>Legend: {detectedLegend.legendLocation}</p>
              {detectedLegend.mapScale && <p>Scale: {detectedLegend.mapScale}</p>}
            </div>
          </div>
        )}

        {/* Export Information */}
        <div className="text-xs text-muted-foreground space-y-1">
          <p>• <strong>GeoJSON:</strong> For web mapping and modern GIS applications</p>
          <p>• <strong>KML:</strong> For Google Earth and legacy mapping systems</p>
          <p>• <strong>Styled KML:</strong> Includes zone colors and rich descriptions</p>
          <p>• <strong>Summary Report:</strong> Detailed statistics and AI analysis</p>
        </div>

        {/* No Data State */}
        {featureCount === 0 && (
          <div className="p-4 bg-muted/50 rounded-lg text-center">
            <Calendar className="w-8 h-8 mx-auto mb-2 opacity-50" />
            <p className="text-sm text-muted-foreground">
              Draw some zones to enable export
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};